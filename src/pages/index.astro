---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Cory Schulz - Full Stack Developer">
	<canvas id="lavaCanvas"></canvas>

	<main class="relative z-10 min-h-screen">
		<div class="container py-12">
			<!-- Hero Section -->
			<section class="mb-20">
				<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-10 rounded-xl shadow-lg border border-white/20">
					<div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
						<!-- Left: Photo and Name -->
						<div class="flex flex-col items-center lg:items-start gap-6">
							<div class="w-64 h-64 rounded-full bg-black/20 bg-noise backdrop-blur-[30px] border-4 border-white/20 shadow-2xl overflow-hidden">
								<img src="/cory.jpg" alt="Cory Schulz" class="w-full h-full object-cover" />
							</div>
							<div class="text-center lg:text-left">
								<h1 class="text-4xl lg:text-5xl font-black text-white mb-3 tracking-tight text-shadow-lg">Cory Schulz</h1>
								<a
									href="mailto:cory@magicspells.io"
									class="text-lg text-white/90 hover:text-white transition-colors block mb-4 font-medium text-shadow">
										cory@magicspells.io
								</a>
								<p class="text-white/80 text-lg lg:text-xl leading-relaxed max-w-md font-normal text-shadow text-pretty">
									I love to design beautiful experiences and create tools that make life more enjoyable and set everyone up for success.
								</p>
							</div>
						</div>

						<!-- Right: Experience Cards -->
						<div class="grid grid-cols-1 gap-6">
							<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20 text-white">
								<div class="flex items-center gap-4">
									<div class="text-4xl font-bold">20</div>
									<div>
										<div class="text-lg font-semibold">Years</div>
										<div class="text-white/80 text-sm">Full Stack Developer</div>
									</div>
								</div>
							</div>
							<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20 text-white">
								<div class="flex items-center gap-4">
									<div class="text-4xl font-bold">10</div>
									<div>
										<div class="text-lg font-semibold">Years</div>
										<div class="text-white/80 text-sm">Shopify Developer</div>
									</div>
								</div>
							</div>
							<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20 text-white">
								<div class="flex items-center gap-4">
									<div class="text-4xl font-bold">4</div>
									<div>
										<div class="text-lg font-semibold">Years</div>
										<div class="text-white/80 text-sm">Designer</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</section>

			<!-- Magic Spells Section -->
			<section class="mb-20">
				<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-10 rounded-xl shadow-lg border border-white/20 text-white">
					<h2 class="text-4xl font-bold mb-8 text-white drop-shadow-lg">Magic Spells</h2>
					<div class="space-y-6 mb-8">
						<p class="text-lg leading-relaxed text-pretty">
							We specialize in fully custom Shopify themes tailored exactly to your brand's ambitions. Beautifully designed, meticulously coded, and ready to scale.
						</p>
						<p class="text-lg leading-relaxed text-pretty">
							We sell a pre-made Shopify theme in the theme store.
						</p>
						<p class="text-lg leading-relaxed text-pretty">
							Free, open-source web components crafted for developers.
						</p>
					</div>
					<div class="text-center">
						<button class="bg-white/10 bg-noise backdrop-blur-[30px] text-white px-8 py-4 rounded-xl hover:bg-white/20 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold border border-white/30">
							Go to Magic Spells
						</button>
					</div>
				</div>
			</section>

			<!-- Tarot Section -->
			<section class="mb-20">
				<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-8 rounded-xl mb-8 shadow-lg border border-white/20 text-white">
					<h2 class="text-4xl font-bold mb-6 text-white drop-shadow-lg">Tarot</h2>
					<p class="text-lg mb-6 leading-relaxed text-pretty">A modern carousel with beautiful physics based animations.</p>
					<div class="flex flex-wrap gap-3 text-sm mb-6">
						<span class="bg-white/20 bg-noise text-white px-4 py-2 rounded-full font-medium">RIPPLE EFFECT</span>
						<span class="bg-white/20 bg-noise text-white px-4 py-2 rounded-full font-medium">BUTTERFLY EFFECT</span>
						<span class="bg-white/20 bg-noise text-white px-4 py-2 rounded-full font-medium">CUBE EFFECT</span>
						<span class="bg-white/20 bg-noise text-white px-4 py-2 rounded-full font-medium">PEACOCK EFFECT</span>
					</div>
				</div>

				<!-- Tarot Examples -->
				<div class="space-y-8 mb-8">
					<!-- Ripple Effect -->
					<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20">
						<h3 class="text-2xl font-bold text-white mb-4">Ripple Effect</h3>
						<tarot-carousel>
							<script type="application/json" data-tarot-options>
								{
									"effect": "ripple",
									"gap": 20,
									"slidesPerView": 2,
									"navigation": {
										"showButtons": false,
										"showPagination": true,
										"paginationPosition": "bottom",
										"buttonsPosition": "bottom"
									}
								}
							</script>
							<tarot-viewport>
								<tarot-slide class="bg-gradient-to-br from-purple-500 to-pink-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 1</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-blue-500 to-cyan-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 2</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-green-500 to-emerald-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 3</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-orange-500 to-red-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 4</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-red-500 to-rose-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 5</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-indigo-500 to-violet-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 6</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-amber-500 to-orange-500 min-h-[180px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 7</tarot-slide>
							</tarot-viewport>
						</tarot-carousel>
					</div>

					<!-- Butterfly Effect -->
					<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20">
						<h3 class="text-2xl font-bold text-white mb-4">Butterfly Effect</h3>
						<tarot-carousel>
							<script type="application/json" data-tarot-options>
								{
									"effect": "butterfly",
									"goToSelectedSlide": true,
									"loop": true,
									"gap": 10,
									"paddingLeft": "25%",
									"paddingRight": "25%",
									"slidesPerView": 1,
									"navigation": {
										"showButtons": false,
										"showPagination": true,
										"paginationPosition": "bottom",
										"buttonsPosition": "bottom"
									}
								}
							</script>
							<tarot-viewport>
								<tarot-slide class="bg-gradient-to-br from-indigo-500 to-purple-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 1</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-pink-500 to-rose-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 2</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-yellow-500 to-orange-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 3</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-teal-500 to-cyan-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 4</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-violet-500 to-fuchsia-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 5</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-lime-500 to-green-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 6</tarot-slide>
								<tarot-slide class="bg-gradient-to-br from-red-500 to-pink-500 min-h-[240px] rounded-lg flex items-center justify-center text-white text-3xl font-bold">Slide 7</tarot-slide>
							</tarot-viewport>
						</tarot-carousel>
					</div>

					<!-- Peacock Effect -->
					<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-6 rounded-xl shadow-lg border border-white/20">
						<h3 class="text-2xl font-bold text-white mb-4">Peacock Effect</h3>
						<div class="max-w-[700px] mx-auto peacock-carousel">
							<tarot-carousel>
								<script type="application/json" data-tarot-options>
									{
										"effect": "peacock",
										"loop": true,
										"navigation": {
											"showButtons": false,
											"showPagination": true,
											"paginationPosition": "bottom",
											"buttonsPosition": "bottom"
										}
									}
								</script>
								<tarot-viewport>
									<tarot-slide class="bg-gradient-to-br from-emerald-500 to-teal-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 1</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-sky-500 to-blue-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 2</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-amber-500 to-yellow-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 3</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-rose-500 to-pink-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 4</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-purple-500 to-indigo-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 5</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-cyan-500 to-sky-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 6</tarot-slide>
									<tarot-slide class="bg-gradient-to-br from-fuchsia-500 to-purple-500 min-h-[500px] rounded flex items-center justify-center text-white text-3xl font-bold">Slide 7</tarot-slide>
								</tarot-viewport>
							</tarot-carousel>
						</div>
					</div>
				</div>

				<div class="text-center">
					<button class="bg-white/10 bg-noise backdrop-blur-[30px] text-white px-8 py-4 rounded-xl hover:bg-white/20 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold border border-white/30">
						Go to TAROT
					</button>
				</div>
			</section>

			<!-- Contact Section -->
			<section class="mb-20">
				<h2 class="text-4xl font-bold mb-12 text-white text-center drop-shadow-lg">Get in Touch</h2>
				<div class="bg-black/15 bg-noise backdrop-blur-[30px] p-8 rounded-xl shadow-lg border border-white/20">
					<p class="text-lg mb-8 text-white text-center leading-relaxed text-pretty">
						Fill out the form below and we'll get back to you as soon as possible.
					</p>
					
					<form class="space-y-8" action="https://api.web3forms.com/submit" method="POST">
						<!-- Hidden fields -->
						<input type="hidden" name="access_key" value="YOUR_ACCESS_KEY_HERE" />
						<input type="hidden" name="subject" value="New Business Inquiry from Cory Schulz Portfolio" />
						<input type="hidden" name="from_name" value="Cory Schulz Portfolio" />
						
						<!-- Your Info Section -->
						<div class="space-y-4">
							<h3 class="text-lg font-semibold text-white mb-4">Your Info</h3>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								<div class="input-field">
									<input
										id="name"
										name="name"
										type="text"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200"
										placeholder="Your name"
									/>
									<label for="name" class="floating-label">Name</label>
								</div>

								<div class="input-field">
									<input
										id="email"
										name="email"
										type="email"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200"
										placeholder="Your email"
									/>
									<label for="email" class="floating-label">Email</label>
								</div>
							</div>
						</div>

						<!-- About Your Business Section -->
						<div class="space-y-4">
							<h3 class="text-lg font-semibold text-white mb-4">About Your Business</h3>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								<div class="input-field">
									<input
										id="company"
										name="company"
										type="text"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200"
										placeholder="Company name"
									/>
									<label for="company" class="floating-label">Company Name</label>
								</div>

								<div class="input-field">
									<input
										id="website"
										name="website"
										type="url"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200"
										placeholder="https://yourwebsite.com"
									/>
									<label for="website" class="floating-label">Website URL</label>
								</div>
							</div>
						</div>

		

						<!-- Project Details Section -->
						<div class="space-y-4">
							<h3 class="text-lg font-semibold text-white mb-4">Tell me about your project</h3>
							<div class="space-y-6">
								<div class="input-field">
									<select
										id="budget"
										name="budget"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200"
									>
										<option value="$10,000 - $20,000" selected>$10,000 - $20,000</option>
										<option value="$20,000 - $40,000">$20,000 - $40,000</option>
										<option value="$40,000 - $60,000">$40,000 - $60,000</option>
										<option value="$60,000 - $100,000">$60,000 - $100,000</option>
										<option value="$100,000+">$100,000+</option>
									</select>
									<label for="budget" class="floating-label">Budget</label>
								</div>
								
								<div class="input-field">
									<textarea
										id="project-description"
										name="project-description"
										rows="4"
										required
										class="w-full px-4 pt-6 pb-3 bg-black/15 bg-noise border border-white/20 rounded-lg text-white focus:border-white/40 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all duration-200 resize-none"
										placeholder="Tell us about your project"
									></textarea>
									<label for="project-description" class="floating-label">Message</label>
								</div>
							</div>
						</div>
						
						<div class="text-center">
							<button
								type="submit"
								class="bg-white/10 bg-noise backdrop-blur-[30px] text-white px-8 py-3 rounded-lg hover:bg-white/20 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/20"
							>
								Send Message
							</button>
						</div>
					</form>
				</div>
			</section>
		</div>
	</main>

	<div class="hint" id="hint">
		colors auto-fade every 10s • double-click or double-tap to change manually
	</div>
</Layout>

<script>
		function init(canvas) {
			const context = canvas.getContext('2d');
			
			// hide hint after 5 seconds
			setTimeout(() => {
				document.getElementById('hint').classList.add('fade');
			}, 5000);
			
			// Motion effects disabled for now
			// const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
			// if (isIOS && typeof DeviceOrientationEvent.requestPermission === 'function') {
			// 	// On iOS, we need user interaction first, so we'll enable on first touch/click
			// 	// This is handled by the existing event listeners below
			// } else {
			// 	// For non-iOS devices, enable immediately
			// 	enableMotion();
			// }

			const colourCount = 6;
			let currentPalette = 0;
			const totalPalettes = 4;
			let autoTransition = true;
			let lastTransitionTime = Date.now();
			const holdDuration = 8000; // 8 seconds hold
			const fadeDuration = 6000; // 6 seconds fade
			const totalCycleDuration = holdDuration + fadeDuration; // 10 seconds total
			let isFading = false;
			let fadeStartTime = 0;
			let nextPalette = 0;
			let baseColors = [];
			let targetColors = [];
			
			/**
			 * gets colors for a specific palette
			 * @param {number} paletteIndex
			 * @returns {string[]} array of color hex values
			 */
			function getPaletteColors(paletteIndex) {
				// Hardcoded fallbacks for iOS Safari compatibility
				const palettes = [
					// Orange palette
					['#f3a840', '#d87c2c', '#ffd47a', '#e28d36', '#c45537', '#e07b3a'],
					// Magenta palette  
					['#8b1538', '#a91b60', '#6d1b45', '#b91a6b', '#4a0e29', '#9e1854'],
					// Blue palette
					['#1e3a5f', '#0f2847', '#0d1929', '#162544', '#0a1628', '#1a4d7a'],
					// Purple palette
					['#4a148c', '#6a1b9a', '#311b92', '#512da8', '#1a0d40', '#3f1675']
				];
				
				// Try to get from CSS custom properties first, fallback to hardcoded
				const root = document.documentElement;
				const colors = [];
				
				for (let i = 0; i < colourCount; i++) {
					const cssColor = getComputedStyle(root).getPropertyValue(`--palette-${paletteIndex}-${i + 1}`).trim();
					colors.push(cssColor || palettes[paletteIndex][i]);
				}
				
				return colors;
			}
			
			/**
			 * interpolates between two colors
			 * @param {string} color1 - hex color
			 * @param {string} color2 - hex color
			 * @param {number} t - interpolation factor (0-1)
			 * @returns {string} interpolated hex color
			 */
			function interpolateColor(color1, color2, t) {
				// convert hex to rgb
				const hex2rgb = (hex) => {
					const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
					return result ? {
						r: parseInt(result[1], 16),
						g: parseInt(result[2], 16),
						b: parseInt(result[3], 16)
					} : null;
				};
				
				const rgb1 = hex2rgb(color1);
				const rgb2 = hex2rgb(color2);
				
				if (!rgb1 || !rgb2) return color1;
				
				// interpolate each channel
				const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * t);
				const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * t);
				const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * t);
				
				// convert back to hex
				return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
			}
			
			let colours = getPaletteColors(currentPalette);
			
			// Ensure colors are properly initialized for iOS Safari
			if (!colours || colours.some(color => !color || color === '')) {
				colours = ['#f3a840', '#d87c2c', '#ffd47a', '#e28d36', '#c45537', '#e07b3a'];
			}

			const heightFactors = [1.2, 1.05, 1, 0.9, 1.25, 1.1];

			let width, height;
			let time = 0;
			let pointerY = 0.5;
			let pointerX = 0.5;

			const stripeOverlap = 2.3;
			const horizontalStep = 8;
			const baseAmplitude = 120;
			const secondaryAmplitude = 60;
			const waveLength = 0.003;
			const waveSpeed = 0.00008;
			const verticalShiftFactor = 0.10;

			const stripePhases = Array.from({ length: colourCount }, (_, i) => (Math.PI * 2 / colourCount) * i);

			const clamp = (v, min = 0, max = 1) => Math.max(min, Math.min(max, v));

			function resize() {
				width = canvas.width = window.innerWidth;
				height = canvas.height = window.innerHeight;
			}

			function onPointerMove(event) {
				const clientY = event.touches ? event.touches[0].clientY : event.clientY;
				const clientX = event.touches ? event.touches[0].clientX : event.clientX;
				pointerY = clamp(clientY / height);
				pointerX = clamp(clientX / width);
			}

			function onDeviceOrientation(event) {
				// Use device orientation to control wave behavior
				// gamma: left/right tilt (-90 to 90)
				// beta: front/back tilt (-180 to 180)
				
				if (event.gamma != null && event.beta != null) {
					// Map gamma (-30 to 30) to pointerX (0 to 1) for more sensitivity
					const sensitiveGamma = Math.max(-30, Math.min(30, event.gamma));
					pointerX = clamp((sensitiveGamma + 30) / 60);
					
					// Map beta (-30 to 30) to pointerY (0 to 1) for more sensitivity
					// Clamp beta to smaller range and invert for intuitive movement
					const sensitiveBeta = Math.max(-30, Math.min(30, event.beta));
					pointerY = clamp(1 - ((sensitiveBeta + 30) / 60));
				}
			}
			
			// Double tap detection for mobile
			let lastTouchTime = 0;
			const doubleTapDelay = 300; // milliseconds
			
			/**
			 * handles double click events to cycle through color palettes
			 */
			function onDoubleClick(event) {
				// manual click disables auto-transition
				autoTransition = false;
				isFading = false;

				currentPalette = (currentPalette + 1) % totalPalettes;
				colours = getPaletteColors(currentPalette);

				// update body class for background color
				document.body.className = currentPalette > 0 ? `palette-${currentPalette}` : '';

				// reset transition timer
				lastTransitionTime = Date.now();
			}

			/**
			 * handles touch events with double tap detection
			 */
			function onTouch(event) {
				const currentTime = new Date().getTime();
				const tapLength = currentTime - lastTouchTime;

				if (tapLength < doubleTapDelay && tapLength > 0) {
					// Double tap detected
					onDoubleClick(event);
				}

				lastTouchTime = currentTime;
			}

			function enableMotion() {
				// Check if DeviceOrientationEvent exists
				if (typeof DeviceOrientationEvent === 'undefined') {
					console.log('DeviceOrientationEvent not supported');
					return;
				}
				
				// iOS 13+ requires permission request
				if (typeof DeviceOrientationEvent.requestPermission === 'function') {
					DeviceOrientationEvent.requestPermission()
						.then(response => {
							console.log('DeviceOrientation permission:', response);
							if (response === 'granted') {
								window.addEventListener('deviceorientation', onDeviceOrientation, true);
								console.log('DeviceOrientation listener added');
							}
						})
						.catch(err => {
							console.error('DeviceOrientation permission error:', err);
						});
				} else {
					// Non-iOS or older iOS versions
					window.addEventListener('deviceorientation', onDeviceOrientation, true);
					console.log('DeviceOrientation listener added (no permission required)');
				}
				
				// Also try DeviceMotionEvent for broader compatibility
				if (typeof DeviceMotionEvent !== 'undefined') {
					if (typeof DeviceMotionEvent.requestPermission === 'function') {
						DeviceMotionEvent.requestPermission()
							.then(response => {
								if (response === 'granted') {
									window.addEventListener('devicemotion', onDeviceMotion, true);
								}
							})
							.catch(console.error);
					} else {
						window.addEventListener('devicemotion', onDeviceMotion, true);
					}
				}
			}
			
			function onDeviceMotion(event) {
				// Alternative using device motion acceleration
				if (event.accelerationIncludingGravity) {
					const x = event.accelerationIncludingGravity.x;
					const y = event.accelerationIncludingGravity.y;
					
					// Map acceleration to pointer values with higher sensitivity
					// X: -5 to 5 -> 0 to 1 (more sensitive range)
					pointerX = clamp((x + 5) / 10);
					// Y: -5 to 5 -> 0 to 1 (inverted, more sensitive)
					pointerY = clamp(1 - ((y + 5) / 10));
				}
			}

			window.addEventListener('resize', resize);
			window.addEventListener('mousemove', onPointerMove);
			window.addEventListener('touchmove', onPointerMove, { passive: true });
			window.addEventListener('dblclick', onDoubleClick);
			window.addEventListener('touchstart', onTouch);
			
			// enable device orientation on first interaction (disabled for now)
			// window.addEventListener('click', enableMotion, { once: true });
			// window.addEventListener('touchstart', enableMotion, { once: true });

			resize();

			/**
			 * draws a single wavy stripe layer
			 * @param {string} fillStyle - color for the stripe
			 * @param {number} phase - phase offset for wave animation
			 * @param {number} index - stripe index for positioning
			 */
			function drawStripe(fillStyle, phase, index) {
				// add very subtle dark shadow effect for layered depth
				context.shadowBlur = 20;
				context.shadowColor = 'rgba(0, 0, 0, 0.15)';
				context.shadowOffsetY = 3;
				
				context.fillStyle = fillStyle;
				context.beginPath();

				const baseStripeHeight = height / colourCount * stripeOverlap;
				const stripeHeight = baseStripeHeight * heightFactors[index];
				const baseY = index * (height / colourCount) - stripeHeight / 2 + height * verticalShiftFactor;

				context.moveTo(0, baseY);

				for (let x = 0; x <= width; x += horizontalStep) {
					// combine multiple wave frequencies for more complex motion
					const dynamicAmp = baseAmplitude * (0.5 + pointerY);
					
					// Add horizontal offset based on pointerX for additional movement
					const horizontalInfluence = (pointerX - 0.5) * 100;
					
					const yOffset = Math.sin(x * waveLength + time + phase + horizontalInfluence * 0.01) * dynamicAmp +
						Math.sin(x * waveLength * 0.5 + time * 0.8 + phase) * secondaryAmplitude * (0.8 + pointerX * 0.4) +
						Math.sin(x * waveLength * 2 + time * 1.5 + phase + horizontalInfluence * 0.02) * 20; // added tertiary wave
					
					context.lineTo(x, baseY + yOffset);
				}

				context.lineTo(width, baseY + stripeHeight);
				context.lineTo(0, baseY + stripeHeight);
				context.closePath();
				context.fill();
			}

			function animate() {
				// update time with constant speed
				time += waveSpeed * 60;
				
				// check for auto color transition
				if (autoTransition) {
					const timeSinceLastTransition = Date.now() - lastTransitionTime;
					
					// after 8 seconds of holding, start the 2 second fade
					if (timeSinceLastTransition > holdDuration && !isFading) {
						// start fade
						isFading = true;
						fadeStartTime = Date.now();
						nextPalette = (currentPalette + 1) % totalPalettes;
						baseColors = [...colours];
						targetColors = getPaletteColors(nextPalette);
					}
					
					// during fade, interpolate colors
					if (isFading) {
						const fadeProgress = (Date.now() - fadeStartTime) / fadeDuration;
						
						if (fadeProgress >= 1) {
							// fade complete
							isFading = false;
							currentPalette = nextPalette;
							colours = targetColors;
							lastTransitionTime = Date.now();
							
							// update body class for background
							document.body.className = currentPalette > 0 ? `palette-${currentPalette}` : '';
						} else {
							// interpolate colors
							colours = baseColors.map((baseColor, i) => 
								interpolateColor(baseColor, targetColors[i], fadeProgress)
							);
						}
					}
				}
				
				context.clearRect(0, 0, width, height);
				
				// draw all stripes
				for (let i = 0; i < colourCount; i++) {
					drawStripe(colours[i], stripePhases[i], i);
				}
				
				requestAnimationFrame(animate);
			}

			animate();
		}

		init(document.getElementById('lavaCanvas'));
	</script>

